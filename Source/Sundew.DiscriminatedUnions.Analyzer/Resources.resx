<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Case" xml:space="preserve">
    <value>case</value>
  </data>
  <data name="Cases" xml:space="preserve">
    <value>cases</value>
  </data>
  <data name="Are" xml:space="preserve">
    <value>are</value>
  </data>
  <data name="Is" xml:space="preserve">
    <value>is</value>
  </data>
  <data name="SwitchAllCasesNotHandledTitle" xml:space="preserve">
    <value>All possible cases not handled.</value>
  </data>
  <data name="SwitchAllCasesNotHandledDescription" xml:space="preserve">
    <value>Switch should handle cases of all possible types.</value>
  </data>
  <data name="SwitchAllCasesNotHandledMessageFormat" xml:space="preserve">
    <value>{0} {1} in '{2}' {3} not handled.</value>
  </data>
  <data name="UnionsCannotBeExtendedOutsideTheirAssemblyTitle" xml:space="preserve">
    <value>Unions extensions must be declared in the same assembly as their union.</value>
  </data>
  <data name="UnionsCannotBeExtendedOutsideTheirAssemblyDescription" xml:space="preserve">
    <value>A union and its extensions must be declared in the same assembly, so that all cases are known at compile time.</value>
  </data>
  <data name="UnionsCannotBeExtendedOutsideTheirAssemblyMessageFormat" xml:space="preserve">
    <value>'{0}' must be declared in assembly '{1}'.</value>
  </data>
  <data name="CasesShouldBeSealedTitle" xml:space="preserve">
    <value>All cases should be sealed.</value>
  </data>
  <data name="CasesShouldBeSealedDescription" xml:space="preserve">
    <value>Cases should be sealed so that all cases are known at compile time.</value>
  </data>
  <data name="CasesShouldBeSealedMessageFormat" xml:space="preserve">
    <value>'{0}' case is not sealed.</value>
  </data>
  <data name="SwitchShouldNotHaveDefaultCaseTitle" xml:space="preserve">
    <value>Default case should not be handled.</value>
  </data>
  <data name="SwitchShouldNotHaveDefaultCaseDescription" xml:space="preserve">
    <value>A switch on a union should not handle the default case.</value>
  </data>
  <data name="SwitchShouldNotHaveDefaultCaseMessageFormat" xml:space="preserve">
    <value>'{0}' is a union and should not handle the default case.</value>
  </data>
  <data name="SwitchHasUnreachableNullCaseTitle" xml:space="preserve">
    <value>Null case should not be handled.</value>
  </data>
  <data name="SwitchHasUnreachableNullCaseDescription" xml:space="preserve">
    <value>Switches on non nullable types should not handle the null case.</value>
  </data>
  <data name="SwitchHasUnreachableNullCaseMessageFormat" xml:space="preserve">
    <value>The null case is unreachable and should not be handled.</value>
  </data>
  <data name="ClassDiscriminatedUnionsMustBeAbstractDescription" xml:space="preserve">
    <value>A union declared for a class/record class must be abstract.</value>
  </data>
  <data name="ClassUnionsMustBeAbstractTitle" xml:space="preserve">
    <value>Class-based union must be abstract.</value>
  </data>
  <data name="ClassUnionsMustBeAbstractMessageFormat" xml:space="preserve">
    <value>'{0}' union is not abstract.</value>
  </data>
  <data name="OnlyUnionsCanExtendOtherUnionsDescription" xml:space="preserve">
    <value>Only unions can extend other unions, so that all cases are known at compile time..</value>
  </data>
  <data name="OnlyUnionsCanExtendOtherUnionsTitle" xml:space="preserve">
    <value>Only unions can extend other unions.</value>
  </data>
  <data name="OnlyUnionsCanExtendOtherUnionsMessageFormat" xml:space="preserve">
    <value>'{0}' is not marked with union attribute.</value>
  </data>
  <data name="CasesMustBeDeclaredInUnionAssemblyDescription" xml:space="preserve">
    <value>A union and its cases must be declared in the same assembly, so that all cases are known at compile time.</value>
  </data>
  <data name="CasesMustBeDeclaredInUnionAssemblyTitle" xml:space="preserve">
    <value>Cases must be declared in the same assembly as their unions</value>
  </data>
  <data name="CasesMustBeDeclaredInUnionAssemblyMessageFormat" xml:space="preserve">
    <value>{0} must be declared in assembly {1}.</value>
  </data>
  <data name="UnnestedCasesShouldHaveFactoryMethodDescription" xml:space="preserve">
    <value>Discriminated unions with unnested cases should declare factory methods.</value>
  </data>
  <data name="UnnestedCasesShouldHaveFactoryMethodTitle" xml:space="preserve">
    <value>Unnested cases should have factory method.</value>
  </data>
  <data name="UnnestedCasesShouldHaveFactoryMethodMessageFormat" xml:space="preserve">
    <value>Case '{0}' should have factory method in '{1}'. Navigate to '{1}' and execute code fix PDU0001 to fix.</value>
  </data>
  <data name="PopulateFactoryMethodsDescription" xml:space="preserve">
    <value>Populates factory methods for all cases in the union.</value>
  </data>
  <data name="PopulateFactoryMethodsTitle" xml:space="preserve">
    <value>Populate factory methods.</value>
  </data>
  <data name="PopulateFactoryMethodsMessageFormat" xml:space="preserve">
    <value>'{0}' should have factory methods for all cases.</value>
  </data>
  <data name="SwitchShouldThrowInDefaultCaseTitle" xml:space="preserve">
    <value>Default case should throw UnreachableCaseException.</value>
  </data>
  <data name="SwitchShouldThrowInDefaultCaseDescription" xml:space="preserve">
    <value>A switch on a union should throw UnreachableCaseException in default case.</value>
  </data>
  <data name="SwitchShouldThrowInDefaultCaseMessageFormat" xml:space="preserve">
    <value>'{0}' is a union and should throw UnreachableCaseException in default case.</value>
  </data>
  <data name="SuppressCS8509Justification" xml:space="preserve">
    <value>Switch over a union, which is checked for exhaustiveness by another analyzer.</value>
  </data>
  <data name="FactoryMethodShouldHaveMatchingCaseTypeAttributeDescription" xml:space="preserve">
    <value>Factory method must have CaseTypeAttribute specifying the created case type to support unions in referenced libraries.</value>
  </data>
  <data name="FactoryMethodShouldHaveMatchingCaseTypeAttributeMessageFormat" xml:space="preserve">
    <value>Factory method '{0}' did not specify '{1}' in a CaseTypeAttribute.</value>
  </data>
  <data name="FactoryMethodShouldHaveMatchingCaseTypeAttributeTitle" xml:space="preserve">
    <value>Factory method must have CaseTypeAttribute.</value>
  </data>
</root>