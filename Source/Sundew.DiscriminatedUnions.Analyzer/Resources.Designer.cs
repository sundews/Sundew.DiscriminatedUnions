//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sundew.DiscriminatedUnions.Analyzer {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Sundew.DiscriminatedUnions.Analyzer.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to are.
        /// </summary>
        public static string Are {
            get {
                return ResourceManager.GetString("Are", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to case.
        /// </summary>
        public static string Case {
            get {
                return ResourceManager.GetString("Case", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cases.
        /// </summary>
        public static string Cases {
            get {
                return ResourceManager.GetString("Cases", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A union and its cases must be declared in the same assembly, so that all cases are known at compile time..
        /// </summary>
        public static string CasesMustBeDeclaredInUnionAssemblyDescription {
            get {
                return ResourceManager.GetString("CasesMustBeDeclaredInUnionAssemblyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must be declared in assembly {1}..
        /// </summary>
        public static string CasesMustBeDeclaredInUnionAssemblyMessageFormat {
            get {
                return ResourceManager.GetString("CasesMustBeDeclaredInUnionAssemblyMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cases must be declared in the same assembly as their unions.
        /// </summary>
        public static string CasesMustBeDeclaredInUnionAssemblyTitle {
            get {
                return ResourceManager.GetString("CasesMustBeDeclaredInUnionAssemblyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cases should be sealed so that all cases are known at compile time..
        /// </summary>
        public static string CasesShouldBeSealedDescription {
            get {
                return ResourceManager.GetString("CasesShouldBeSealedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; case is not sealed..
        /// </summary>
        public static string CasesShouldBeSealedMessageFormat {
            get {
                return ResourceManager.GetString("CasesShouldBeSealedMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All cases should be sealed..
        /// </summary>
        public static string CasesShouldBeSealedTitle {
            get {
                return ResourceManager.GetString("CasesShouldBeSealedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A union declared for a class/record class must be abstract..
        /// </summary>
        public static string ClassDiscriminatedUnionsMustBeAbstractDescription {
            get {
                return ResourceManager.GetString("ClassDiscriminatedUnionsMustBeAbstractDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; union is not abstract..
        /// </summary>
        public static string ClassUnionsMustBeAbstractMessageFormat {
            get {
                return ResourceManager.GetString("ClassUnionsMustBeAbstractMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class-based union must be abstract..
        /// </summary>
        public static string ClassUnionsMustBeAbstractTitle {
            get {
                return ResourceManager.GetString("ClassUnionsMustBeAbstractTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is.
        /// </summary>
        public static string Is {
            get {
                return ResourceManager.GetString("Is", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only unions can extend other unions, so that all cases are known at compile time...
        /// </summary>
        public static string OnlyUnionsCanExtendOtherUnionsDescription {
            get {
                return ResourceManager.GetString("OnlyUnionsCanExtendOtherUnionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not marked with union attribute..
        /// </summary>
        public static string OnlyUnionsCanExtendOtherUnionsMessageFormat {
            get {
                return ResourceManager.GetString("OnlyUnionsCanExtendOtherUnionsMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only unions can extend other unions..
        /// </summary>
        public static string OnlyUnionsCanExtendOtherUnionsTitle {
            get {
                return ResourceManager.GetString("OnlyUnionsCanExtendOtherUnionsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Populates factory methods for all cases in the union..
        /// </summary>
        public static string PopulateFactoryMethodsDescription {
            get {
                return ResourceManager.GetString("PopulateFactoryMethodsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should have factory methods for all cases..
        /// </summary>
        public static string PopulateFactoryMethodsMessageFormat {
            get {
                return ResourceManager.GetString("PopulateFactoryMethodsMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Populate factory methods..
        /// </summary>
        public static string PopulateFactoryMethodsTitle {
            get {
                return ResourceManager.GetString("PopulateFactoryMethodsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch over a union, which is checked for exhaustiveness by another analyzer..
        /// </summary>
        public static string SuppressCS8509Justification {
            get {
                return ResourceManager.GetString("SuppressCS8509Justification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch should handle cases of all possible types..
        /// </summary>
        public static string SwitchAllCasesNotHandledDescription {
            get {
                return ResourceManager.GetString("SwitchAllCasesNotHandledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} {1} in &apos;{2}&apos; {3} not handled..
        /// </summary>
        public static string SwitchAllCasesNotHandledMessageFormat {
            get {
                return ResourceManager.GetString("SwitchAllCasesNotHandledMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All possible cases not handled..
        /// </summary>
        public static string SwitchAllCasesNotHandledTitle {
            get {
                return ResourceManager.GetString("SwitchAllCasesNotHandledTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switches on non nullable types should not handle the null case..
        /// </summary>
        public static string SwitchHasUnreachableNullCaseDescription {
            get {
                return ResourceManager.GetString("SwitchHasUnreachableNullCaseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The null case is unreachable and should not be handled..
        /// </summary>
        public static string SwitchHasUnreachableNullCaseMessageFormat {
            get {
                return ResourceManager.GetString("SwitchHasUnreachableNullCaseMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Null case should not be handled..
        /// </summary>
        public static string SwitchHasUnreachableNullCaseTitle {
            get {
                return ResourceManager.GetString("SwitchHasUnreachableNullCaseTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A switch on a union should not handle the default case..
        /// </summary>
        public static string SwitchShouldNotHaveDefaultCaseDescription {
            get {
                return ResourceManager.GetString("SwitchShouldNotHaveDefaultCaseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a union and should not handle the default case..
        /// </summary>
        public static string SwitchShouldNotHaveDefaultCaseMessageFormat {
            get {
                return ResourceManager.GetString("SwitchShouldNotHaveDefaultCaseMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default case should not be handled..
        /// </summary>
        public static string SwitchShouldNotHaveDefaultCaseTitle {
            get {
                return ResourceManager.GetString("SwitchShouldNotHaveDefaultCaseTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A switch on a union should throw UnreachableCaseException in default case..
        /// </summary>
        public static string SwitchShouldThrowInDefaultCaseDescription {
            get {
                return ResourceManager.GetString("SwitchShouldThrowInDefaultCaseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a union and should throw UnreachableCaseException in default case..
        /// </summary>
        public static string SwitchShouldThrowInDefaultCaseMessageFormat {
            get {
                return ResourceManager.GetString("SwitchShouldThrowInDefaultCaseMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default case should throw UnreachableCaseException..
        /// </summary>
        public static string SwitchShouldThrowInDefaultCaseTitle {
            get {
                return ResourceManager.GetString("SwitchShouldThrowInDefaultCaseTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A union and its extensions must be declared in the same assembly, so that all cases are known at compile time..
        /// </summary>
        public static string UnionsCannotBeExtendedOutsideTheirAssemblyDescription {
            get {
                return ResourceManager.GetString("UnionsCannotBeExtendedOutsideTheirAssemblyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; must be declared in assembly &apos;{1}&apos;..
        /// </summary>
        public static string UnionsCannotBeExtendedOutsideTheirAssemblyMessageFormat {
            get {
                return ResourceManager.GetString("UnionsCannotBeExtendedOutsideTheirAssemblyMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unions extensions must be declared in the same assembly as their union..
        /// </summary>
        public static string UnionsCannotBeExtendedOutsideTheirAssemblyTitle {
            get {
                return ResourceManager.GetString("UnionsCannotBeExtendedOutsideTheirAssemblyTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discriminated unions with unnested cases should declare factory methods..
        /// </summary>
        public static string UnnestedCasesShouldHaveFactoryMethodDescription {
            get {
                return ResourceManager.GetString("UnnestedCasesShouldHaveFactoryMethodDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Case &apos;{0}&apos; should have factory method in &apos;{1}&apos;..
        /// </summary>
        public static string UnnestedCasesShouldHaveFactoryMethodMessageFormat {
            get {
                return ResourceManager.GetString("UnnestedCasesShouldHaveFactoryMethodMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unnested cases should have factory method..
        /// </summary>
        public static string UnnestedCasesShouldHaveFactoryMethodTitle {
            get {
                return ResourceManager.GetString("UnnestedCasesShouldHaveFactoryMethodTitle", resourceCulture);
            }
        }
    }
}
