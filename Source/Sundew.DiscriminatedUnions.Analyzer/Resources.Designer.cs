//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sundew.DiscriminatedUnions.Analyzer {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Sundew.DiscriminatedUnions.Analyzer.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to are.
        /// </summary>
        public static string Are {
            get {
                return ResourceManager.GetString("Are", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to case.
        /// </summary>
        public static string Case {
            get {
                return ResourceManager.GetString("Case", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to cases.
        /// </summary>
        public static string Cases {
            get {
                return ResourceManager.GetString("Cases", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cases should be sealed so that all cases are known at compile time..
        /// </summary>
        public static string CasesShouldBeSealedDescription {
            get {
                return ResourceManager.GetString("CasesShouldBeSealedDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; case is not sealed..
        /// </summary>
        public static string CasesShouldBeSealedMessageFormat {
            get {
                return ResourceManager.GetString("CasesShouldBeSealedMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All cases should be sealed..
        /// </summary>
        public static string CasesShouldBeSealedTitle {
            get {
                return ResourceManager.GetString("CasesShouldBeSealedTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A discriminated union declared for a class/class record must be abstract..
        /// </summary>
        public static string ClassDiscriminatedUnionsMustBeAbstractDescription {
            get {
                return ResourceManager.GetString("ClassDiscriminatedUnionsMustBeAbstractDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; discriminated union is not abstract..
        /// </summary>
        public static string ClassDiscriminatedUnionsMustBeAbstractMessageFormat {
            get {
                return ResourceManager.GetString("ClassDiscriminatedUnionsMustBeAbstractMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class-based discriminated union must be abstract..
        /// </summary>
        public static string ClassDiscriminatedUnionsMustBeAbstractTitle {
            get {
                return ResourceManager.GetString("ClassDiscriminatedUnionsMustBeAbstractTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discriminated union constructors must be private protected, so only nested types can derived from it..
        /// </summary>
        public static string DiscriminatedUnionsCanOnlyHavePrivateProtectedConstructorsDescription {
            get {
                return ResourceManager.GetString("DiscriminatedUnionsCanOnlyHavePrivateProtectedConstructorsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; contains non private protected constructor(s)..
        /// </summary>
        public static string DiscriminatedUnionsCanOnlyHavePrivateProtectedConstructorsMessageFormat {
            get {
                return ResourceManager.GetString("DiscriminatedUnionsCanOnlyHavePrivateProtectedConstructorsMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discriminated union constructors must be private protected..
        /// </summary>
        public static string DiscriminatedUnionsCanOnlyHavePrivateProtectedConstructorsTitle {
            get {
                return ResourceManager.GetString("DiscriminatedUnionsCanOnlyHavePrivateProtectedConstructorsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discriminated unions should only have private protected constructors, so that all cases are known at compile time.
        /// </summary>
        public static string DiscriminatedUnionsMustHavePrivateProtectedConstructorDescription {
            get {
                return ResourceManager.GetString("DiscriminatedUnionsMustHavePrivateProtectedConstructorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has an undeclared non private protected constructor: &apos;{1}&apos;..
        /// </summary>
        public static string DiscriminatedUnionsMustHavePrivateProtectedConstructorMessageFormat {
            get {
                return ResourceManager.GetString("DiscriminatedUnionsMustHavePrivateProtectedConstructorMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discriminated unions should only have private protected constructors..
        /// </summary>
        public static string DiscriminatedUnionsMustHavePrivateProtectedConstructorTitle {
            get {
                return ResourceManager.GetString("DiscriminatedUnionsMustHavePrivateProtectedConstructorTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A discriminated declared for an interface must be internal..
        /// </summary>
        public static string InterfaceDiscriminatedUnionsMustBeInternalDescription {
            get {
                return ResourceManager.GetString("InterfaceDiscriminatedUnionsMustBeInternalDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} discriminated union must be internal..
        /// </summary>
        public static string InterfaceDiscriminatedUnionsMustBeInternalMessageFormat {
            get {
                return ResourceManager.GetString("InterfaceDiscriminatedUnionsMustBeInternalMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface-based discriminated union must be internal..
        /// </summary>
        public static string InterfaceDiscriminatedUnionsMustBeInternalTitle {
            get {
                return ResourceManager.GetString("InterfaceDiscriminatedUnionsMustBeInternalTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to is.
        /// </summary>
        public static string Is {
            get {
                return ResourceManager.GetString("Is", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch over a discriminated union, which is checked for exhaustiveness by another analyzer..
        /// </summary>
        public static string SuppressCS8509Justification {
            get {
                return ResourceManager.GetString("SuppressCS8509Justification", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switch should handle cases of all possible types..
        /// </summary>
        public static string SwitchAllCasesNotHandledDescription {
            get {
                return ResourceManager.GetString("SwitchAllCasesNotHandledDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} {1} in &apos;{2}&apos; {3} not handled..
        /// </summary>
        public static string SwitchAllCasesNotHandledMessageFormat {
            get {
                return ResourceManager.GetString("SwitchAllCasesNotHandledMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All possible cases not handled..
        /// </summary>
        public static string SwitchAllCasesNotHandledTitle {
            get {
                return ResourceManager.GetString("SwitchAllCasesNotHandledTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Switches on non nullable types should not handle the null case..
        /// </summary>
        public static string SwitchHasUnreachableNullCaseDescription {
            get {
                return ResourceManager.GetString("SwitchHasUnreachableNullCaseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The null case is unreachable and should not be handled..
        /// </summary>
        public static string SwitchHasUnreachableNullCaseMessageFormat {
            get {
                return ResourceManager.GetString("SwitchHasUnreachableNullCaseMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Null case should not be handled..
        /// </summary>
        public static string SwitchHasUnreachableNullCaseTitle {
            get {
                return ResourceManager.GetString("SwitchHasUnreachableNullCaseTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A switch on a discriminated union should not handle the default case..
        /// </summary>
        public static string SwitchShouldNotHaveDefaultCaseDescription {
            get {
                return ResourceManager.GetString("SwitchShouldNotHaveDefaultCaseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a discriminated union and should not handle the default case..
        /// </summary>
        public static string SwitchShouldNotHaveDefaultCaseMessageFormat {
            get {
                return ResourceManager.GetString("SwitchShouldNotHaveDefaultCaseMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default case should not be handled..
        /// </summary>
        public static string SwitchShouldNotHaveDefaultCaseTitle {
            get {
                return ResourceManager.GetString("SwitchShouldNotHaveDefaultCaseTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A switch on a discriminated union should throw UnreachableCaseException in default case..
        /// </summary>
        public static string SwitchShouldThrowInDefaultCaseDescription {
            get {
                return ResourceManager.GetString("SwitchShouldThrowInDefaultCaseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a discriminated union and should throw UnreachableCaseException in default case..
        /// </summary>
        public static string SwitchShouldThrowInDefaultCaseMessageFormat {
            get {
                return ResourceManager.GetString("SwitchShouldThrowInDefaultCaseMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default case should throw UnreachableCaseException..
        /// </summary>
        public static string SwitchShouldThrowInDefaultCaseTitle {
            get {
                return ResourceManager.GetString("SwitchShouldThrowInDefaultCaseTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Discriminated unions with unnested cases should declare factory methods..
        /// </summary>
        public static string UnnestedCasesShouldHaveFactoryMethodDescription {
            get {
                return ResourceManager.GetString("UnnestedCasesShouldHaveFactoryMethodDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Case &apos;{0}&apos; should have factory method in &apos;{1}&apos;..
        /// </summary>
        public static string UnnestedCasesShouldHaveFactoryMethodMessageFormat {
            get {
                return ResourceManager.GetString("UnnestedCasesShouldHaveFactoryMethodMessageFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unnested cases should have factory method..
        /// </summary>
        public static string UnnestedCasesShouldHaveFactoryMethodTitle {
            get {
                return ResourceManager.GetString("UnnestedCasesShouldHaveFactoryMethodTitle", resourceCulture);
            }
        }
    }
}
